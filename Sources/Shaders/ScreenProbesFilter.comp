#include "Common.frag"

PUSH(
    int OutIrradianceTextureRID;
    int InProbesTextureRID;
    int NormalTextureRID;
    int VisibilityTextureRID;
    int DepthTextureRID;
    int _ViewBufferRID;
    int TLASRID;
    int VoxInstancesRID;
    int Axis;
)

#define IMPORT
#include "Probe.frag"

#define ENABLED 1

COMPUTE(8, 8, 1)
void main() {
    ivec2 cPixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 cProbePixel = (cPixel/8)*8 + ivec2(GetJitter()*8);
    vec3 o = GetCameraPosition();
    
    
#if ENABLED
    float cDepth = texelFetch(Sampler2D[DepthTextureRID], cProbePixel, 0).x;
    vec3 cPos = o + UVToRayDir(vec2(cProbePixel)*GetiRes())*cDepth;
    vec3 cNormal = texelFetch(Sampler2D[NormalTextureRID], cProbePixel, 0).xyz;
    vec4 cSamp = texelFetch(Sampler2D[InProbesTextureRID], cPixel, 0);
    vec2 cProbeUV = (vec2(mod(cPixel, 8))/* + GetProbeJitter(cProbePixel)*/)/8.0;
    vec3 cProbeDir = OctahedronEncode(cProbeUV);
    vec3 cHit = cPos + cProbeDir*cSamp.w;

    vec3 radiance = cSamp.xyz;
    float total = 1.0;
    for(int i = -7; i <= 7; i++) {
            if(i == 0) continue;

            ivec2 offset = ivec2(0);
            offset[Axis] = i*8;
        
            ivec2 nPixel = cPixel + offset;
            ivec2 nProbePixel = cProbePixel + offset;
            vec4 nSamp = texelFetch(Sampler2D[InProbesTextureRID], nPixel, 0);
            float nDepth = texelFetch(Sampler2D[DepthTextureRID], nProbePixel, 0).x;
            vec3 nNormal = texelFetch(Sampler2D[NormalTextureRID], nProbePixel, 0).xyz;
            vec3 nPos = o + UVToRayDir(vec2(nProbePixel)*GetiRes())*nDepth;
            vec2 nProbeUV = (vec2(mod(cPixel, 8))/* + GetProbeJitter(nProbePixel)*/)/8.0;
            vec3 nProbeDir = OctahedronEncode(nProbeUV);
            vec3 nHit = nPos + nProbeDir*min(nSamp.w, cSamp.w);

            float wAngle = pow(max(dot(cProbeDir, normalize(nHit - cPos)), 0.0), 20.0);

            float W[5] = {1.0, 0.75, 0.50, 0.25, 0.125};
            float w = (clamp(nProbePixel, ivec2(0), ivec2(1.0/GetiRes())) == nProbePixel) ? 1.0 : 0.0;
            w *= 1.0/pow(abs(i), 0.8);
            w *= PlaneWeight(cPos, cNormal, nPos);
            w *= wAngle;
            radiance += nSamp.xyz*w;
            total += w;
    }
    radiance /= total;
#else
    vec3 radiance = texelFetch(Sampler2D[InProbesTextureRID], cPixel, 0).xyz;
#endif

    imageStore(Image2DW[OutIrradianceTextureRID], cPixel, vec4(radiance, cSamp.w));
}