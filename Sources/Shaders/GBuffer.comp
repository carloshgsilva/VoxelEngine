#include "Common.frag"

PUSH(
    int ColorTextureRID;
    int NormalTextureRID;
    int MaterialTextureRID;
    int MotionTextureRID;
    int DepthTextureRID;
    int _ViewBufferRID;
    int BVHBufferRID;
    int BVHLeafsBufferRID;
)

#define IMPORT
#include "View.frag"
#include "Light.frag"

const vec2 OFFSETS[16] = {
    vec2(0.5000, 0.3333),
    vec2(0.2500, 0.6667),
    vec2(0.7500, 0.1111),
    vec2(0.1250, 0.4444),
    vec2(0.6250, 0.7778),
    vec2(0.3750, 0.2222),
    vec2(0.8750, 0.5556),
    vec2(0.0625, 0.8889),
    vec2(0.5625, 0.0370),
    vec2(0.3125, 0.3704),
    vec2(0.8125, 0.7037),
    vec2(0.1875, 0.1481),
    vec2(0.6875, 0.4815),
    vec2(0.4375, 0.8148),
    vec2(0.9375, 0.2593),
    vec2(0.0313, 0.5926)
};
struct Sampler {
    ivec2 pixel;
    int frame;
    int depth;
};

void InitSampler(inout Sampler samp, ivec2 pixel, int frame) {
    samp.pixel = pixel;
    samp.frame = frame;
    samp.depth = 0;
}
#define BLUE_NOISE (Sampler2D[ViewBuffer[_ViewBufferRID].BlueNoiseRID])
float SampleNoise(inout Sampler samp) {
    vec2 res = textureSize(BLUE_NOISE, 0);
    samp.depth++;
    //return texelFetch(BLUE_NOISE, ivec2((vec2(samp.pixel)+vec2(GOLDEN_RATIO*(mod(samp.frame+samp.depth*5,64)), GOLDEN_RATIO*(mod(samp.frame+samp.depth*7+1,64))))*res)%512, 0).r;
    return texelFetch(BLUE_NOISE, (samp.pixel+ivec2(OFFSETS[(samp.frame+samp.depth)%16]*512.0))%512, 0).r;
}

COMPUTE(8, 8, 1)
void main() {
    vec2 uv = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    vec3 outColor = vec3(1.0);

#if 1 // PT
    Sampler samp;
    InitSampler(samp, ivec2(gl_GlobalInvocationID.xy), GetFrame()%16);
    uint seed = InitRand(gl_GlobalInvocationID.x+floatBitsToInt(GetCameraPosition().x)^floatBitsToInt(GetCameraPosition().y), gl_GlobalInvocationID.y+floatBitsToInt(GetCameraPosition().z)^floatBitsToInt(GetCameraPosition().y));
    vec3 acc = vec3(0.0);
    vec3 throughput = vec3(1.0);

    TraceHit hit;
    for(int depth = 0; depth < 1; depth++) {
        if(RayTrace(o, d, hit, INF)) {
            vec3 new_o = o + d*hit.t + hit.normal*EPS;
            vec2 rnd = vec2(SampleNoise(samp), SampleNoise(samp));
            vec3 new_d = CosineSampleHemisphere(rnd, hit.normal);

            throughput *= 0.9*max(dot(new_d, hit.normal), 0.0);

            o = new_o;
            d = new_d;
        } else {
            acc += vec3(0.3) * throughput;
            break;
        }
    }
    outColor = acc;//vec3(fract(hit.t*0.1));//hit.debug;
#endif

    ivec2 dst = ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y);
    imageStore(Image2DW[ColorTextureRID], dst, vec4(outColor, 1));
    imageStore(Image2DW[NormalTextureRID], dst, vec4(hit.normal, 1));
    imageStore(Image2DW[MaterialTextureRID], dst, vec4(0));
    imageStore(Image2DW[MotionTextureRID], dst, vec4(0));
    imageStore(Image2DW[DepthTextureRID], dst, vec4(0));
}