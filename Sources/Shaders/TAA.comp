#include "Common.frag"

PUSH(
    int OutRadianceTextureRID;
    int InRadianceTextureRID;
    int InLastRadianceTextureRID;
    int MotionTextureRID;
    int DepthTextureRID;
    int PreviousDepthTextureRID;
    int _ViewBufferRID;
)

#define IMPORT
#include "View.frag"
#include "Denoiser.frag"

COMPUTE(8, 8, 1)
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(pixel+0.5)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    float t = texelFetch(Sampler2D[DepthTextureRID], pixel, 0).x;
    vec3 pos = o + d * t;

    vec2 previousUV = WorldToUVLastView(pos);
    float previousDepth = texture(Sampler2D[PreviousDepthTextureRID], previousUV).x;
    vec3 previousRadiance = texture(Sampler2D[InLastRadianceTextureRID], previousUV).xyz;
    vec3 previousPos = PrevousView_UVDepthToPos(previousUV, previousDepth);

    vec3 radiance = texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0).xyz;

    if(clamp(previousUV, 0.0, 1.0) != previousUV) {
        previousRadiance = radiance;
    }

    //Neighbour clip
    vec3 ref0 = texelFetch(Sampler2D[InRadianceTextureRID], pixel+ivec2(1, 1) , 0).xyz;
    vec3 ref1 = texelFetch(Sampler2D[InRadianceTextureRID], pixel-ivec2(1, 1) , 0).xyz;
    vec3 ref2 = texelFetch(Sampler2D[InRadianceTextureRID], pixel+ivec2(-1, 1), 0).xyz;
    vec3 ref3 = texelFetch(Sampler2D[InRadianceTextureRID], pixel-ivec2(-1, 1), 0).xyz;
    vec3 ref4 = texelFetch(Sampler2D[InRadianceTextureRID], pixel+ivec2(1, 0) , 0).xyz;
    vec3 ref5 = texelFetch(Sampler2D[InRadianceTextureRID], pixel-ivec2(0, 1) , 0).xyz;
    vec3 ref6 = texelFetch(Sampler2D[InRadianceTextureRID], pixel+ivec2(-1, 0), 0).xyz;
    vec3 ref7 = texelFetch(Sampler2D[InRadianceTextureRID], pixel-ivec2(0, -1), 0).xyz;

    vec3 nmin = min(ref0, min(ref1, min(ref2, min(ref3, min(ref4, min(ref5, min(ref6, ref7)))))));
    vec3 nmax = max(ref0, max(ref1, max(ref2, max(ref3, max(ref4, max(ref5, max(ref6, ref7)))))));

    previousRadiance = clamp(previousRadiance, nmin, nmax);

    vec2 motion = previousUV - uv;

    vec3 temp = mix(radiance, previousRadiance, 0.95);
    imageStore(Image2DW[OutRadianceTextureRID], pixel, vec4(temp, 1));
}