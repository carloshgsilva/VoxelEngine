#include "Common.frag"

PUSH(
    int OutRadianceTextureRID;
    int InRadianceTextureRID;
    int GBufferRID;
    int _ViewBufferRID;
    int Size;
)

#define IMPORT
#include "View.frag"
#include "Denoiser.frag"

COMPUTE(8, 8, 1)
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(pixel)*GetiRes();
    if(uv.x > 1.0 || uv.y > 1.0)return;
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    uvec4 gbuffer = GBufferFetch(GBufferRID, pixel);
    if(GBufferGetVisibility(gbuffer) == 0u) {
        return;
    }
    float t = GBufferGetDepth(gbuffer);
    vec3 normal = GBufferGetNormal(gbuffer);
    float roughness = GBufferGetMaterial(gbuffer).x;
    vec3 pos = o + d * t;

    vec4 radianceVar = texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0);
    vec3 radiance = radianceVar.xyz;
    float luminance = Luminance(radiance);
    float hitdist = radianceVar.w;

    vec3 acc = radiance;
    float total = 1.0;
    vec2 offsetRnd = texelFetch(Sampler2D[ViewBuffer[_ViewBufferRID].BlueNoiseRID], (pixel+GetFrame()*10)%512, 0).xy*2.0 - 1.0;
    for(int x = -1; x <= 1; x++) {
        for(int y = -1; y <= 1; y++) {
            ivec2 offset = ivec2((vec2(x, y) + offsetRnd) * Size * (clamp(4.0*pow(roughness, 0.2)*hitdist/(hitdist+t), 0, 8)));
            ivec2 nPixel = ivec2(pixel + offset);
            vec2 nUV = vec2(nPixel)*GetiRes();

            uvec4 nGBuffer = GBufferFetch(GBufferRID, nPixel);
            vec3 nDir = UVToRayDir(nUV);
            float nT = GBufferGetDepth(nGBuffer);
            vec3 nPos = o + nDir * nT;
            vec4 nRadiance = texelFetch(Sampler2D[InRadianceTextureRID], nPixel, 0);
            float nLuminance = Luminance(nRadiance.xyz);
            vec3 nNormal = GBufferGetNormal(nGBuffer);
            float nRoughness = GBufferGetMaterial(nGBuffer).x;
            
            float w = 1.0;
            w *= exp(-150.0*abs(nRoughness - roughness));
            w *= IsInsideScreenWeight(nUV);
            w *= NormalWeight(normal, nNormal, nT);
            w *= PlaneWeight(pos, normal, nPos, nT);

            acc += w*nRadiance.xyz;
            total += w;
        }
    }

    acc /= total;
    imageStore(Image2DW[OutRadianceTextureRID], pixel, vec4(acc, hitdist));
}