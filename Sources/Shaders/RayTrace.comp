#include "Common.frag"

PUSH(
    int ColorTextureRID;
    int _ViewBufferRID;
    int BVHBufferRID;
    int BVHLeafsBufferRID;
)

#define IMPORT
#include "View.frag"
#include "Light.frag"

COMPUTE(8, 8, 1)
void main() {
    vec2 uv = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    vec3 outColor = vec3(1.0);

#if 0 // debug RT
    TraceHit hit;
    if(RayTrace(o, d, hit, INF)) {
    }
    //outColor = vec3((hit.normal));//hit.debug;
    //outColor = hit.debug;
    outColor = vec3(fract(hit.t));
    //outColor = vec3(fract(length(d*2)));
#endif

#if 1 // pT
    uint seed = InitRand(gl_GlobalInvocationID.x+floatBitsToInt(GetCameraPosition().x)^floatBitsToInt(GetCameraPosition().y), gl_GlobalInvocationID.y+floatBitsToInt(GetCameraPosition().z)^floatBitsToInt(GetCameraPosition().y));
    vec3 acc = vec3(0.0);
    vec3 throughput = vec3(1.0);

    for(int depth = 0; depth < 2; depth++) {
        TraceHit hit;
        if(RayTrace(o, d, hit, INF)) {
            vec3 new_o = o + d*hit.t + hit.normal*EPS;
            vec3 new_d = CosineSampleHemisphere(vec2(rand(seed), rand(seed)), hit.normal);

            throughput *= 0.9*max(dot(new_d, hit.normal), 0.0);

            o = new_o;
            d = new_d;
        } else {
            acc += vec3(1.0) * throughput;
            break;
        }
    }
    outColor = acc;//vec3(fract(hit.t*0.1));//hit.debug;
#endif

#if 0 // old RT
    float t = raycastWorldDistance(o, d, 2024.0);
    vec3 outColor = vec3(fract(t));
#endif

    imageStore(Image2DW[ColorTextureRID], ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y), vec4(outColor,1));
}