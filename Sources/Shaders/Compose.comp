#include "Common.frag"

PUSH(
    int OutColorTextureRID;
    int InRadianceTextureRID;
    int VisibilityTextureRID;
    int DepthTextureRID;
    int _ViewBufferRID;
    int VoxInstancesRID;
)

const int TLASRID = 0;
#define IMPORT
#include "View.frag"
#include "Light.frag"


vec3 aces(vec3 x) {
  const float a = 2.51;
  const float b = 0.03;
  const float c = 2.43;
  const float d = 0.59;
  const float e = 0.14;
  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

vec3 filmic(vec3 x) {
  vec3 X = max(vec3(0.0), x - 0.004);
  vec3 result = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);
  return pow(result, vec3(2.2));
}


COMPUTE(8, 8, 1)
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(pixel)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    float t = texelFetch(Sampler2D[DepthTextureRID], pixel, 0).x;
    uint visibility = texelFetch(USampler2D[VisibilityTextureRID], pixel, 0).x;
    vec3 pos = o + d * t;

    vec3 radiance = vec3(0);
    if(visibility != 0u) {
        vec3 albedo;
        vec3 material;
        GetMaterial(visibility, albedo, material);
        radiance = albedo*(texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0).xyz + material.z*10.0);
    } else {
        radiance = GetSkyColor(d);
    }

    // radiance = vec3(exp(-1/texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0).w*0.0001)); // debug variance

    float exposure = 1.0;
    // exposure tone mapping
    vec3 mapped = vec3(1.0) - exp(-radiance * exposure);
    mapped = aces(mapped);
    // gamma correction 
    mapped = pow(mapped, vec3(1.0 / 2.2));

    imageStore(Image2DW[OutColorTextureRID], pixel, vec4(mapped,1));
}