#include "Common.frag"

PUSH(
    int OutRadianceTextureRID;
    int InRadianceTextureRID;
    int InLastRadianceTextureRID;
    int MotionTextureRID;
    int DepthTextureRID;
    int PreviousDepthTextureRID;
    int _ViewBufferRID;
)

#define IMPORT
#include "View.frag"
#include "Denoiser.frag"

COMPUTE(8, 8, 1)
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(pixel+0.5)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    float t = texelFetch(Sampler2D[DepthTextureRID], pixel, 0).x;
    vec3 pos = o + d * t;

    vec2 previousUV = WorldToUVLastView(pos);
    float previousDepth = texture(Sampler2D[PreviousDepthTextureRID], previousUV).x;
    vec4 previousRadianceVariance = texture(Sampler2D[InLastRadianceTextureRID], previousUV);
    vec3 previousRadiance = previousRadianceVariance.xyz;
    float previousVariance = previousRadianceVariance.w;
    vec3 previousPos = PrevousView_UVDepthToPos(previousUV, previousDepth);

    vec4 radianceVar = texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0);
    vec3 radiance = radianceVar.xyz;
    float variance = max(previousVariance - 0.05 , 0);

    if(clamp(previousUV, 0.0, 1.0) != previousUV || distance(previousPos, pos) > 0.5) {
        previousRadiance = radiance;
        variance = 1.0;
    }
    
    radiance = mix(radiance, previousRadiance, 0.95);
    imageStore(Image2DW[OutRadianceTextureRID], pixel, vec4(radiance, variance));
}