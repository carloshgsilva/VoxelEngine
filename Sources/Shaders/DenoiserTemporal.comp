#include "Common.frag"

PUSH(
    int OutRadianceTextureRID;
    int InRadianceTextureRID;
    int InLastRadianceTextureRID;
    int MotionTextureRID;
    int DepthTextureRID;
    int _ViewBufferRID;
)

#define IMPORT
#include "View.frag"
#include "Denoiser.frag"

COMPUTE(8, 8, 1)
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(pixel)*GetiRes();
    vec3 o = GetCameraPosition();
    vec3 d = UVToRayDir(uv);

    float t = texelFetch(Sampler2D[DepthTextureRID], pixel, 0).x;
    vec2 motion = texelFetch(Sampler2D[MotionTextureRID], pixel, 0).xy;
    vec4 radianceVar = texelFetch(Sampler2D[InRadianceTextureRID], pixel, 0);
    vec3 radiance = radianceVar.xyz;
    float variance = radianceVar.w;
    vec3 lastRadiance = texture(Sampler2D[InLastRadianceTextureRID], (pixel+0.5)*GetiRes() - motion).xyz;

    // vec3 minRadiance = vec3(INF);
    // vec3 maxRadiance = vec3(0);
    // for(int x = -1; x <= 1; x++) {
    //     for(int y = -1; y <= 1; y++) {
    //         if(x == 0 && y == 0) continue;

    //         ivec2 nPixel = pixel + ivec2(x, y);
    //         vec3 nRadiance = texelFetch(Sampler2D[InRadianceTextureRID], nPixel, 0).xyz;

    //         minRadiance = min(minRadiance, nRadiance);
    //         maxRadiance = max(maxRadiance, nRadiance);
    //     }
    // }

    vec3 pos = o + d * t;
    
    // vec3 lastLuminance = (lastRadiance);
    // vec3 newLuminance = (clamp(lastRadiance, minRadiance, maxRadiance));

    vec3 temp = mix(radiance, lastRadiance, clamp(0.95 , 0, 1));
    if(t >= INF) {
        temp = vec3(0);
    }
    imageStore(Image2DW[OutRadianceTextureRID], pixel, vec4(temp,1));
    // imageStore(Image2DW[OutRadianceTextureRID], pixel, vec4(vec3(variance),1));
}