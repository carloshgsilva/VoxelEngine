#include "Noise.h"

#include <glm/glm.hpp>
#include <FastNoise/FastNoise.h>
#include <cmath>

static FastNoise N;


/*
//Algorithm to build PERM array
#include <random>
	std::mt19937_64 gen(1);

	for (int i = 0; i < 256; i++)
		m_Perm[i] = i;

	for (int j = 0; j < 256; j++)
	{
		int rng = (int)(gen() % (256 - j));
		int k = rng + j;
		int l = m_Perm[j];
		m_Perm[j] = m_Perm[j + 256] = m_Perm[k];
		m_Perm[k] = l;
	}

	for (int i = 0; i < 256; i++) {
		std::cout << unsigned int(m_Perm[i]) << ", ";
		if ((i+ 1) % 16 == 0) std::cout << '\n';
	}*/

const FN_DECIMAL CELL_2D_X[] = {
	-0.6440658039, -0.08028078721, 0.9983546168, 0.9869492062, 0.9284746418, 0.6051097552, -0.794167404, -0.3488667991, -0.943136526, -0.9968171318, 0.8740961579, 0.1421139764, 0.4282553608, -0.9986665833, 0.9996760121, -0.06248383632,
	0.7120139305, 0.8917660409, 0.1094842955, -0.8730880804, 0.2594811489, -0.6690063346, -0.9996834972, -0.8803608671, -0.8166554937, 0.8955599676, -0.9398321388, 0.07615451399, -0.7147270565, 0.8707354457, -0.9580008579, 0.4905965632,
	0.786775944, 0.1079711577, 0.2686638979, 0.6113487322, -0.530770584, -0.7837268286, -0.8558691039, -0.5726093896, -0.9830740914, 0.7087766359, 0.6807027153, -0.08864708788, 0.6704485923, -0.1350735482, -0.9381333003, 0.9756655376,
	0.4231433671, -0.4959787385, 0.1005554325, -0.7645857281, -0.5859053796, -0.9751154306, -0.6972258572, 0.7907012002, -0.9109899213, -0.9584307894, -0.8269529333, 0.2608264719, -0.7773760119, 0.7606456974, -0.8961083758, -0.9838134719,
	0.7338893576, 0.2161226729, 0.673509891, -0.5512056873, 0.6899744332, 0.868004831, 0.5897430311, -0.8950444221, -0.3595752773, 0.8209486981, -0.2912360132, -0.9965011374, 0.9766994634, 0.738790822, -0.4730947722, 0.8946479441,
	-0.6943628971, -0.6620468182, -0.0887255502, -0.7512250855, -0.5322986898, 0.5226295385, 0.2296318375, 0.7915307344, -0.2756485999, -0.6900234522, 0.07090588086, 0.5981278485, 0.3033429312, -0.7253142797, -0.9855874307, -0.1761843396,
	-0.6438468325, -0.9956136595, 0.8541580762, -0.9999807666, -0.02152416253, -0.8705983095, -0.1197138014, -0.992107781, -0.9091181546, 0.788610536, -0.994636402, 0.4211256853, 0.3110430857, -0.4031127839, 0.7610684239, 0.7685674467,
	0.152271555, -0.9364648723, 0.1681333739, -0.3567427907, -0.418445483, -0.98774778, 0.8705250765, -0.8911701067, -0.7315350966, 0.6030885658, -0.4149130821, 0.7585339481, 0.6963196535, 0.8332685012, -0.8086815232, 0.7518116724,
	-0.3490535894, 0.6972110903, -0.8795676928, -0.6442331882, 0.6610236811, -0.9853565782, -0.590338458, 0.09843602117, 0.5646534882, -0.6023259233, -0.3539248861, 0.5132728656, 0.9380385118, -0.7599270056, -0.7425936564, -0.6679610562,
	-0.3018497816, 0.814478266, 0.03777430269, -0.7514235086, 0.9662556939, -0.4720194901, -0.435054126, 0.7091901235, 0.929379209, 0.9997434357, 0.8306320299, -0.9434019629, -0.133133759, 0.5048413216, 0.3711995273, 0.98552091,
	0.7401857005, -0.9999981398, -0.2144033253, 0.4808624681, -0.413835885, 0.644229305, 0.9626648696, 0.1833665934, 0.5794129, 0.01404446873, 0.4388494993, 0.5213612322, -0.5281609948, -0.9745306846, -0.9904373013, 0.9100232252,
	-0.9914057719, 0.7892627765, 0.3364421659, -0.9416099764, 0.7802732656, 0.886302871, 0.6524471291, 0.5762186726, -0.08987644664, -0.2177026782, -0.9720345052, -0.05722538858, 0.8105983127, 0.3410261032, 0.6452309645, -0.7810612152,
	0.9989395718, -0.808247815, 0.6370177929, 0.5844658772, 0.2054070861, 0.055960522, -0.995827561, 0.893409165, -0.931516824, 0.328969469, -0.3193837488, 0.7314755657, -0.7913517714, -0.2204109786, 0.9955900414, -0.7112353139,
	-0.7935008741, -0.9961918204, -0.9714163995, -0.9566188669, 0.2748495632, -0.4681743221, -0.9614449642, 0.585194072, 0.4532946061, -0.9916113176, 0.942479587, -0.9813704753, -0.6538429571, 0.2923335053, -0.2246660704, -0.1800781949,
	-0.9581216256, 0.552215082, -0.9296791922, 0.643183699, 0.9997325981, -0.4606920354, -0.2148721265, 0.3482070809, 0.3075517813, 0.6274756393, 0.8910881765, -0.6397771309, -0.4479080125, -0.5247665011, -0.8386507094, 0.3901291416,
	0.1458336921, 0.01624613149, -0.8273199879, 0.5611100679, -0.8380219841, -0.9856122234, -0.861398618, 0.6398413916, 0.2694510795, 0.4327334514, -0.9960265354, -0.939570655, -0.8846996446, 0.7642113189, -0.7002080528, 0.664508256,
};
const FN_DECIMAL CELL_2D_Y[] = {
	0.7649700911, 0.9967722885, 0.05734160033, -0.1610318741, 0.371395799, -0.7961420628, 0.6076990492, -0.9371723195, 0.3324056156, 0.07972205329, -0.4857529277, -0.9898503007, 0.9036577593, 0.05162417479, -0.02545330525, -0.998045976,
	-0.7021653386, -0.4524967717, -0.9939885256, -0.4875625128, -0.9657481729, -0.7432567015, 0.02515761212, 0.4743044842, 0.5771254669, 0.4449408324, 0.3416365773, 0.9970960285, 0.6994034849, 0.4917517499, 0.286765333, 0.8713868327,
	0.6172387009, 0.9941540269, 0.9632339851, -0.7913613129, 0.847515538, 0.6211056739, 0.5171924952, -0.8198283277, -0.1832084353, 0.7054329737, 0.7325597678, 0.9960630973, 0.7419559859, 0.9908355749, -0.346274329, 0.2192641299,
	-0.9060627411, -0.8683346653, 0.9949314574, -0.6445220433, -0.8103794704, -0.2216977607, 0.7168515217, 0.612202264, -0.412428616, 0.285325116, 0.56227115, -0.9653857009, -0.6290361962, 0.6491672535, 0.443835306, -0.1791955706,
	-0.6792690269, -0.9763662173, 0.7391782104, 0.8343693968, 0.7238337389, 0.4965557504, 0.8075909592, -0.4459769977, -0.9331160806, -0.5710019572, 0.9566512346, -0.08357920318, 0.2146116448, -0.6739348049, 0.8810115417, 0.4467718167,
	-0.7196250184, -0.749462481, 0.9960561112, 0.6600461127, -0.8465566164, -0.8525598897, -0.9732775654, 0.6111293616, -0.9612584717, -0.7237870097, -0.9974830104, -0.8014006968, 0.9528814544, -0.6884178931, -0.1691668301, 0.9843571905,
	0.7651544003, -0.09355982605, -0.5200134429, -0.006202125807, -0.9997683284, 0.4919944954, -0.9928084436, -0.1253880012, -0.4165383308, -0.6148930171, -0.1034332049, -0.9070022917, -0.9503958117, 0.9151503065, -0.6486716073, 0.6397687707,
	-0.9883386937, 0.3507613761, 0.9857642561, -0.9342026446, -0.9082419159, 0.1560587169, 0.4921240607, -0.453669308, 0.6818037859, 0.7976742329, 0.9098610522, 0.651633524, 0.7177318024, -0.5528685241, 0.5882467118, 0.6593778956,
	0.9371027648, -0.7168658839, -0.4757737632, 0.7648291307, 0.7503650398, 0.1705063456, -0.8071558121, -0.9951433815, -0.8253280792, -0.7982502628, 0.9352738503, 0.8582254747, -0.3465310238, 0.65000842, -0.6697422351, 0.7441962291,
	-0.9533555, 0.5801940659, -0.9992862963, -0.659820211, 0.2575848092, 0.881588113, -0.9004043022, -0.7050172826, 0.369126382, -0.02265088836, 0.5568217228, -0.3316515286, 0.991098079, -0.863212164, -0.9285531277, 0.1695539323,
	-0.672402505, -0.001928841934, 0.9767452145, -0.8767960349, 0.9103515037, -0.7648324016, 0.2706960452, -0.9830446035, 0.8150341657, -0.9999013716, -0.8985605806, 0.8533360801, 0.8491442537, -0.2242541966, -0.1379635899, -0.4145572694,
	0.1308227633, 0.6140555916, 0.9417041303, -0.336705587, -0.6254387508, 0.4631060578, -0.7578342456, -0.8172955655, -0.9959529228, -0.9760151351, 0.2348380732, -0.9983612848, 0.5856025746, -0.9400538266, -0.7639875669, 0.6244544645,
	0.04604054566, 0.5888424828, 0.7708490978, -0.8114182882, 0.9786766212, -0.9984329822, 0.09125496582, -0.4492438803, -0.3636982357, 0.9443405575, -0.9476254645, -0.6818676535, -0.6113610831, 0.9754070948, -0.0938108173, -0.7029540015,
	-0.6085691109, -0.08718862881, -0.237381926, 0.2913423132, 0.9614872426, 0.8836361266, -0.2749974196, -0.8108932717, -0.8913607575, 0.129255541, -0.3342637104, -0.1921249337, -0.7566302845, -0.9563164339, -0.9744358146, 0.9836522982,
	-0.2863615732, 0.8337016872, 0.3683701937, 0.7657119102, -0.02312427772, 0.8875600535, 0.976642191, 0.9374176384, 0.9515313457, -0.7786361937, -0.4538302125, -0.7685604874, -0.8940796454, -0.8512462154, 0.5446696133, 0.9207601495,
	-0.9893091197, -0.9998680229, 0.5617309299, -0.8277411985, 0.545636467, 0.1690223212, -0.5079295433, 0.7685069899, -0.9630140787, 0.9015219132, 0.08905695279, -0.3423550559, -0.4661614943, -0.6449659371, 0.7139388509, 0.7472809229,
};

const unsigned char PERM[] = {
	104, 118, 54, 109, 76, 98, 134, 1, 40, 189, 156, 89, 29, 87, 50, 36,
	65, 101, 205, 225, 63, 153, 144, 146, 155, 235, 16, 75, 48, 193, 111, 71,
	12, 41, 22, 60, 170, 199, 127, 167, 192, 11, 194, 42, 30, 180, 18, 57,
	222, 166, 251, 214, 136, 137, 88, 80, 91, 175, 68, 221, 247, 53, 10, 51,
	143, 103, 195, 206, 20, 219, 67, 123, 78, 147, 17, 252, 129, 74, 237, 26,
	202, 5, 185, 92, 150, 220, 52, 161, 66, 84, 39, 190, 55, 212, 183, 196,
	116, 27, 172, 228, 204, 35, 142, 83, 119, 70, 230, 106, 173, 32, 207, 208,
	25, 8, 86, 114, 133, 179, 200, 240, 187, 229, 197, 131, 168, 231, 95, 154,
	248, 113, 94, 213, 255, 124, 234, 115, 56, 132, 159, 19, 7, 169, 211, 58,
	151, 62, 209, 216, 164, 0, 223, 126, 160, 158, 254, 157, 85, 182, 238, 165,
	31, 73, 45, 59, 117, 239, 23, 90, 227, 188, 102, 186, 69, 46, 178, 203,
	233, 44, 242, 120, 13, 14, 49, 226, 174, 138, 9, 99, 162, 210, 81, 125,
	4, 236, 244, 77, 163, 148, 139, 2, 250, 96, 112, 224, 82, 108, 6, 93,
	246, 218, 253, 43, 198, 64, 232, 121, 215, 181, 171, 217, 21, 128, 34, 28,
	145, 3, 38, 37, 184, 107, 243, 47, 149, 249, 97, 24, 152, 141, 79, 100,
	61, 105, 122, 245, 176, 191, 177, 201, 241, 15, 110, 135, 33, 140, 72, 130,
};

unsigned char Index2D_256(unsigned char offset, int x, int y) {
	return PERM[(x & 0xff) + PERM[(y & 0xff) + offset]];
}


float Noise::GetOctave(float x, float y, int octaves) {
	float total = 0.0f;
	float frequency = 1.0f;
	float amplitude = 1.0f;
	float maxValue = 0.0f;

	for (int i = 0; i < octaves; i++) {
		total += Get(x * frequency, y * frequency) * amplitude;
		maxValue += amplitude;
		amplitude *= 0.5f;
		frequency *= 2.0f;
	}

	return total / maxValue;
}
float Noise::GetOctave(float x, float y, float z, int octaves) {
	float total = 0.0f;
	float frequency = 1.0f;
	float amplitude = 1.0f;
	float maxValue = 0.0f;

	for (int i = 0; i < octaves; i++) {
		total += Get(x * frequency, y * frequency, z * frequency) * amplitude;
		maxValue += amplitude;
		amplitude *= 0.5f;
		frequency *= 2.0f;
	}

	return total/maxValue;
}

float Noise::Get(float x, float y) {
    return N.GetPerlin(x, y);
}
float Noise::Get(float x, float y, float z) {
	return N.GetPerlin(x, y, z);
}

float Noise::GetTerrainNoise(float x, float y, float z, TerrainNoiseInfo& info) {
	float v = GetOctave(x*info.Frequency2D, z * info.Frequency2D, info.Octaves2D) + info.Bias2D;
	v += GetOctave(x * info.Frequency3D, y * info.Frequency3D, z * info.Frequency3D, info.Octaves3D) + info.Bias3D;
	return v;
}

CellsResult Noise::GetCells(float inx, float inz) {
	constexpr float JITTER = 0.5f;

	//Perturb Noise
#if 0
	float inx2 = inx;
	inx += N.GetSimplex(inx * 0.2f, inz * 0.2f) * 100.0f + N.GetSimplex(inx * 1.0f, inz * 1.0f) * 20.0f;
	inz += N.GetSimplex(inx2 * 0.2f, inz * 0.2f) * 100.0f + N.GetSimplex(inx2 * 1.0f, inz * 1.0f) * 20.0f;
#endif

	float x = inx * 0.005f;
	float z = inz * 0.005f;

	int xr = std::roundf(x);
	int zr = std::roundf(z);

	int i = 0;

	float bestDist = 999999.0f;
	CellsResult cr;
	cr.CurrentNoise = 0.0f;

	for (int j = 0; j < 4; j++) {
		cr.Distance[i] = 9999.0f;
	}

	for (int xi = xr - 1; xi <= xr + 1; xi++) {
		for (int zi = zr - 1; zi <= zr + 1; zi++) {
			int lut = Index2D_256(0, xi, zi);
			float noise = CELL_2D_X[lut];
			float noisex = noise * JITTER;
			float noisey = CELL_2D_Y[lut] * JITTER;

			glm::vec2 dir = glm::vec2(xi + noisex - x, zi + noisey - z);

			float d = glm::dot(dir, dir);

			if (d < bestDist) {
				cr.CurrentNoise = noise;
				bestDist = d;
			}

			for (int j = 0; j < 4; j++) {
				//Find a bigger one 
				if (d < cr.Distance[j]) {

					//Shift Right
					for (int k = 3; k > j; k--) {
						cr.Distance[k] = cr.Distance[k - 1];
						cr.Noise[k] = cr.Noise[k - 1];
					}

					cr.Distance[j] = d;
					cr.Noise[j] = noise * 0.5f + 0.5f;
					break;
				}
			}
		}
	}
	cr.CurrentNoise = cr.CurrentNoise * 0.5f + 0.5f;
	cr.CurrentDistance = bestDist;
	
	return cr;
}
