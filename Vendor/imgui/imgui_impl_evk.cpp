#include "imgui_impl_evk.h"
#include "evk_internal.h"
#include "evk.h"

using namespace evk;

static Image g_fontImage;
static Buffer g_vertexBuffer;
static Buffer g_indexBuffer;
static Pipeline g_pipeline;

void CreateOrResizeBuffer(Buffer& buff, uint64_t desired_size, BufferUsage usage) {
    const uint64_t START_SIZE = 1024*32;
    if(!buff || GetDesc(buff).size < desired_size) {
        BufferDesc bdesc = {};
        bdesc.name = usage == BufferUsage::Vertex ? "ImGui Vertex Buffer" : "ImGui Index Buffer";
        bdesc.size = desired_size > START_SIZE ? desired_size : START_SIZE;
        bdesc.memoryType = MemoryType::CPU_TO_GPU;
        bdesc.usage = usage;
        buff = CreateBuffer(bdesc);
    }
}

const std::vector<uint32_t> VERTEX = {
    0x07230203,0x00010000,0x000d000a,0x00000068,0x00000000,0x00020011,0x00000001,0x0006000b,0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,0x000b000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x0000000f,0x00000011,0x00000018,0x0000001b,0x00030003,0x00000002,0x000001cc,0x00080004,0x455f4c47,0x6e5f5458,0x6e756e6f,0x726f6669,0x75715f6d,0x66696c61,0x00726569,0x000a0004,0x455f4c47,0x735f5458,0x65646168,0x6d695f72,0x5f656761,0x64616f6c,0x726f665f,0x7474616d,0x00006465,0x000a0004,0x475f4c47,0x4c474f4f,0x70635f45,0x74735f70,0x5f656c79,0x656e696c,0x7269645f,0x69746365,0x00006576,0x00080004,0x475f4c47,0x4c474f4f,0x6e695f45,0x64756c63,0x69645f65,0x74636572,0x00657669,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00040005,0x00000009,0x6f6c6f43,0x00000072,0x00040005,0x0000000b,0x6c6f4361,0x0000726f,0x00030005,0x0000000f,0x00005655,0x00030005,0x00000011,0x00565561,0x00060005,0x00000016,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000016,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x00000016,0x00000001,0x505f6c67,0x746e696f,0x657a6953,0x00000000,0x00070006,0x00000016,0x00000002,0x435f6c67,0x4470696c,0x61747369,0x0065636e,0x00070006,0x00000016,0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,0x00030005,0x00000018,0x00000000,0x00040005,0x0000001b,0x736f5061,0x00000000,0x00060005,0x0000001d,0x7375505f,0x6e6f4368,0x6e617473,0x00000074,0x00050006,0x0000001d,0x00000000,0x61635375,0x0000656c,0x00060006,0x0000001d,0x00000001,0x61725475,0x616c736e,0x00006574,0x00060006,0x0000001d,0x00000002,0x78655475,0x65727574,0x00444952,0x00030005,0x0000001f,0x00000000,0x00050005,0x00000035,0x706d6153,0x3272656c,0x00000044,0x00050005,0x0000003a,0x6d615355,0x72656c70,0x00004432,0x00050005,0x0000003f,0x706d6153,0x3372656c,0x00000044,0x00050005,0x00000044,0x6d615355,0x72656c70,0x00004433,0x00050005,0x00000049,0x706d6153,0x4372656c,0x00656275,0x00050005,0x0000004d,0x67616d49,0x57443265,0x00000000,0x00050005,0x00000051,0x616d4949,0x44326567,0x00000057,0x00050005,0x00000055,0x616d4955,0x44326567,0x00000057,0x00050005,0x00000059,0x67616d49,0x57443365,0x00000000,0x00050005,0x0000005d,0x616d4949,0x44336567,0x00000057,0x00050005,0x00000061,0x616d4955,0x44336567,0x00000057,0x00050005,0x00000062,0x67616d49,0x52443265,0x00000000,0x00050005,0x00000063,0x616d4949,0x44326567,0x00000052,0x00050005,0x00000064,0x616d4955,0x44326567,0x00000052,0x00050005,0x00000065,0x67616d49,0x52443365,0x00000000,0x00050005,0x00000066,0x616d4949,0x44336567,0x00000052,0x00050005,0x00000067,0x616d4955,0x44336567,0x00000052,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000b,0x0000001e,0x00000002,0x00040047,0x0000000f,0x0000001e,0x00000001,0x00040047,0x00000011,0x0000001e,0x00000001,0x00050048,0x00000016,0x00000000,0x0000000b,0x00000000,0x00050048,0x00000016,0x00000001,0x0000000b,0x00000001,0x00050048,0x00000016,0x00000002,0x0000000b,0x00000003,0x00050048,0x00000016,0x00000003,0x0000000b,0x00000004,0x00030047,0x00000016,0x00000002,0x00040047,0x0000001b,0x0000001e,0x00000000,0x00050048,0x0000001d,0x00000000,0x00000023,0x00000000,0x00050048,0x0000001d,0x00000001,0x00000023,0x00000008,0x00050048,0x0000001d,0x00000002,0x00000023,0x00000010,0x00030047,0x0000001d,0x00000002,0x00040047,0x00000035,0x00000022,0x00000000,0x00040047,0x00000035,0x00000021,0x00000001,0x00040047,0x0000003a,0x00000022,0x00000000,0x00040047,0x0000003a,0x00000021,0x00000001,0x00040047,0x0000003f,0x00000022,0x00000000,0x00040047,0x0000003f,0x00000021,0x00000001,0x00040047,0x00000044,0x00000022,0x00000000,0x00040047,0x00000044,0x00000021,0x00000001,0x00040047,0x00000049,0x00000022,0x00000000,0x00040047,0x00000049,0x00000021,0x00000001,0x00040047,0x0000004d,0x00000022,0x00000000,0x00040047,0x0000004d,0x00000021,0x00000002,0x00030047,0x0000004d,0x00000013,0x00030047,0x0000004d,0x00000019,0x00040047,0x00000051,0x00000022,0x00000000,0x00040047,0x00000051,0x00000021,0x00000002,0x00030047,0x00000051,0x00000013,0x00030047,0x00000051,0x00000019,0x00040047,0x00000055,0x00000022,0x00000000,0x00040047,0x00000055,0x00000021,0x00000002,0x00030047,0x00000055,0x00000013,0x00030047,0x00000055,0x00000019,0x00040047,0x00000059,0x00000022,0x00000000,0x00040047,0x00000059,0x00000021,0x00000002,0x00030047,0x00000059,0x00000013,0x00030047,0x00000059,0x00000019,0x00040047,0x0000005d,0x00000022,0x00000000,0x00040047,0x0000005d,0x00000021,0x00000002,0x00030047,0x0000005d,0x00000013,0x00030047,0x0000005d,0x00000019,0x00040047,0x00000061,0x00000022,0x00000000,0x00040047,0x00000061,0x00000021,0x00000002,0x00030047,0x00000061,0x00000013,0x00030047,0x00000061,0x00000019,0x00040047,0x00000062,0x00000022,0x00000000,0x00040047,0x00000062,0x00000021,0x00000002,0x00030047,0x00000062,0x00000013,0x00030047,0x00000062,0x00000018,0x00040047,0x00000063,0x00000022,0x00000000,0x00040047,0x00000063,0x00000021,0x00000002,0x00030047,0x00000063,0x00000013,0x00030047,0x00000063,0x00000018,0x00040047,0x00000064,0x00000022,0x00000000,0x00040047,0x00000064,0x00000021,0x00000002,0x00030047,0x00000064,0x00000013,0x00030047,0x00000064,0x00000018,0x00040047,0x00000065,0x00000022,0x00000000,0x00040047,0x00000065,0x00000021,0x00000002,0x00030047,0x00000065,0x00000013,0x00030047,0x00000065,0x00000018,0x00040047,0x00000066,0x00000022,0x00000000,0x00040047,0x00000066,0x00000021,0x00000002,0x00030047,0x00000066,0x00000013,0x00030047,0x00000066,0x00000018,0x00040047,0x00000067,0x00000022,0x00000000,0x00040047,0x00000067,0x00000021,0x00000002,0x00030047,0x00000067,0x00000013,0x00030047,0x00000067,0x00000018,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00040017,0x0000000d,0x00000006,0x00000002,0x00040020,0x0000000e,0x00000003,0x0000000d,0x0004003b,0x0000000e,0x0000000f,0x00000003,0x00040020,0x00000010,0x00000001,0x0000000d,0x0004003b,0x00000010,0x00000011,0x00000001,0x00040015,0x00000013,0x00000020,0x00000000,0x0004002b,0x00000013,0x00000014,0x00000001,0x0004001c,0x00000015,0x00000006,0x00000014,0x0006001e,0x00000016,0x00000007,0x00000006,0x00000015,0x00000015,0x00040020,0x00000017,0x00000003,0x00000016,0x0004003b,0x00000017,0x00000018,0x00000003,0x00040015,0x00000019,0x00000020,0x00000001,0x0004002b,0x00000019,0x0000001a,0x00000000,0x0004003b,0x00000010,0x0000001b,0x00000001,0x0005001e,0x0000001d,0x0000000d,0x0000000d,0x00000019,0x00040020,0x0000001e,0x00000009,0x0000001d,0x0004003b,0x0000001e,0x0000001f,0x00000009,0x00040020,0x00000020,0x00000009,0x0000000d,0x0004002b,0x00000019,0x00000024,0x00000001,0x0004002b,0x00000006,0x00000028,0x3f800000,0x0004002b,0x00000006,0x00000029,0xbf800000,0x0005002c,0x0000000d,0x0000002a,0x00000028,0x00000029,0x0004002b,0x00000006,0x0000002c,0x00000000,0x00090019,0x00000031,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000032,0x00000031,0x0004001c,0x00000033,0x00000032,0x00000014,0x00040020,0x00000034,0x00000000,0x00000033,0x0004003b,0x00000034,0x00000035,0x00000000,0x00090019,0x00000036,0x00000013,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000037,0x00000036,0x0004001c,0x00000038,0x00000037,0x00000014,0x00040020,0x00000039,0x00000000,0x00000038,0x0004003b,0x00000039,0x0000003a,0x00000000,0x00090019,0x0000003b,0x00000006,0x00000002,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000003c,0x0000003b,0x0004001c,0x0000003d,0x0000003c,0x00000014,0x00040020,0x0000003e,0x00000000,0x0000003d,0x0004003b,0x0000003e,0x0000003f,0x00000000,0x00090019,0x00000040,0x00000013,0x00000002,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000041,0x00000040,0x0004001c,0x00000042,0x00000041,0x00000014,0x00040020,0x00000043,0x00000000,0x00000042,0x0004003b,0x00000043,0x00000044,0x00000000,0x00090019,0x00000045,0x00000006,0x00000003,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000046,0x00000045,0x0004001c,0x00000047,0x00000046,0x00000014,0x00040020,0x00000048,0x00000000,0x00000047,0x0004003b,0x00000048,0x00000049,0x00000000,0x00090019,0x0000004a,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000004b,0x0000004a,0x00000014,0x00040020,0x0000004c,0x00000000,0x0000004b,0x0004003b,0x0000004c,0x0000004d,0x00000000,0x00090019,0x0000004e,0x00000019,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000004f,0x0000004e,0x00000014,0x00040020,0x00000050,0x00000000,0x0000004f,0x0004003b,0x00000050,0x00000051,0x00000000,0x00090019,0x00000052,0x00000013,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x00000053,0x00000052,0x00000014,0x00040020,0x00000054,0x00000000,0x00000053,0x0004003b,0x00000054,0x00000055,0x00000000,0x00090019,0x00000056,0x00000006,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x00000057,0x00000056,0x00000014,0x00040020,0x00000058,0x00000000,0x00000057,0x0004003b,0x00000058,0x00000059,0x00000000,0x00090019,0x0000005a,0x00000019,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000005b,0x0000005a,0x00000014,0x00040020,0x0000005c,0x00000000,0x0000005b,0x0004003b,0x0000005c,0x0000005d,0x00000000,0x00090019,0x0000005e,0x00000013,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000005f,0x0000005e,0x00000014,0x00040020,0x00000060,0x00000000,0x0000005f,0x0004003b,0x00000060,0x00000061,0x00000000,0x0004003b,0x0000004c,0x00000062,0x00000000,0x0004003b,0x00000050,0x00000063,0x00000000,0x0004003b,0x00000054,0x00000064,0x00000000,0x0004003b,0x00000058,0x00000065,0x00000000,0x0004003b,0x0000005c,0x00000066,0x00000000,0x0004003b,0x00000060,0x00000067,0x00000000,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000007,0x0000000c,0x0000000b,0x0003003e,0x00000009,0x0000000c,0x0004003d,0x0000000d,0x00000012,0x00000011,0x0003003e,0x0000000f,0x00000012,0x0004003d,0x0000000d,0x0000001c,0x0000001b,0x00050041,0x00000020,0x00000021,0x0000001f,0x0000001a,0x0004003d,0x0000000d,0x00000022,0x00000021,0x00050085,0x0000000d,0x00000023,0x0000001c,0x00000022,0x00050041,0x00000020,0x00000025,0x0000001f,0x00000024,0x0004003d,0x0000000d,0x00000026,0x00000025,0x00050081,0x0000000d,0x00000027,0x00000023,0x00000026,0x00050085,0x0000000d,0x0000002b,0x00000027,0x0000002a,0x00050051,0x00000006,0x0000002d,0x0000002b,0x00000000,0x00050051,0x00000006,0x0000002e,0x0000002b,0x00000001,0x00070050,0x00000007,0x0000002f,0x0000002d,0x0000002e,0x0000002c,0x00000028,0x00050041,0x00000008,0x00000030,0x00000018,0x0000001a,0x0003003e,0x00000030,0x0000002f,0x000100fd,0x00010038
};

const std::vector<uint32_t> FRAGMENT = {
    0x07230203,0x00010000,0x000d000a,0x00000057,0x00000000,0x00020011,0x00000001,0x00020011,0x000014b6,0x0008000a,0x5f565053,0x5f545845,0x63736564,0x74706972,0x695f726f,0x7865646e,0x00676e69,0x0006000b,0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,0x0008000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x0000001f,0x00030010,0x00000004,0x00000007,0x00030003,0x00000002,0x000001cc,0x00080004,0x455f4c47,0x6e5f5458,0x6e756e6f,0x726f6669,0x75715f6d,0x66696c61,0x00726569,0x000a0004,0x455f4c47,0x735f5458,0x65646168,0x6d695f72,0x5f656761,0x64616f6c,0x726f665f,0x7474616d,0x00006465,0x000a0004,0x475f4c47,0x4c474f4f,0x70635f45,0x74735f70,0x5f656c79,0x656e696c,0x7269645f,0x69746365,0x00006576,0x00080004,0x475f4c47,0x4c474f4f,0x6e695f45,0x64756c63,0x69645f65,0x74636572,0x00657669,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00050005,0x00000009,0x5f74756f,0x6f6c6f43,0x00000072,0x00040005,0x0000000b,0x6f6c6f43,0x00000072,0x00050005,0x00000011,0x706d6153,0x3272656c,0x00000044,0x00060005,0x00000014,0x7375505f,0x6e6f4368,0x6e617473,0x00000074,0x00050006,0x00000014,0x00000000,0x61635375,0x0000656c,0x00060006,0x00000014,0x00000001,0x61725475,0x616c736e,0x00006574,0x00060006,0x00000014,0x00000002,0x78655475,0x65727574,0x00444952,0x00030005,0x00000016,0x00000000,0x00030005,0x0000001f,0x00005655,0x00050005,0x00000029,0x6d615355,0x72656c70,0x00004432,0x00050005,0x0000002e,0x706d6153,0x3372656c,0x00000044,0x00050005,0x00000033,0x6d615355,0x72656c70,0x00004433,0x00050005,0x00000038,0x706d6153,0x4372656c,0x00656275,0x00050005,0x0000003c,0x67616d49,0x57443265,0x00000000,0x00050005,0x00000040,0x616d4949,0x44326567,0x00000057,0x00050005,0x00000044,0x616d4955,0x44326567,0x00000057,0x00050005,0x00000048,0x67616d49,0x57443365,0x00000000,0x00050005,0x0000004c,0x616d4949,0x44336567,0x00000057,0x00050005,0x00000050,0x616d4955,0x44336567,0x00000057,0x00050005,0x00000051,0x67616d49,0x52443265,0x00000000,0x00050005,0x00000052,0x616d4949,0x44326567,0x00000052,0x00050005,0x00000053,0x616d4955,0x44326567,0x00000052,0x00050005,0x00000054,0x67616d49,0x52443365,0x00000000,0x00050005,0x00000055,0x616d4949,0x44336567,0x00000052,0x00050005,0x00000056,0x616d4955,0x44336567,0x00000052,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000b,0x0000001e,0x00000000,0x00040047,0x00000011,0x00000022,0x00000000,0x00040047,0x00000011,0x00000021,0x00000001,0x00050048,0x00000014,0x00000000,0x00000023,0x00000000,0x00050048,0x00000014,0x00000001,0x00000023,0x00000008,0x00050048,0x00000014,0x00000002,0x00000023,0x00000010,0x00030047,0x00000014,0x00000002,0x00040047,0x0000001f,0x0000001e,0x00000001,0x00040047,0x00000029,0x00000022,0x00000000,0x00040047,0x00000029,0x00000021,0x00000001,0x00040047,0x0000002e,0x00000022,0x00000000,0x00040047,0x0000002e,0x00000021,0x00000001,0x00040047,0x00000033,0x00000022,0x00000000,0x00040047,0x00000033,0x00000021,0x00000001,0x00040047,0x00000038,0x00000022,0x00000000,0x00040047,0x00000038,0x00000021,0x00000001,0x00040047,0x0000003c,0x00000022,0x00000000,0x00040047,0x0000003c,0x00000021,0x00000002,0x00030047,0x0000003c,0x00000013,0x00030047,0x0000003c,0x00000019,0x00040047,0x00000040,0x00000022,0x00000000,0x00040047,0x00000040,0x00000021,0x00000002,0x00030047,0x00000040,0x00000013,0x00030047,0x00000040,0x00000019,0x00040047,0x00000044,0x00000022,0x00000000,0x00040047,0x00000044,0x00000021,0x00000002,0x00030047,0x00000044,0x00000013,0x00030047,0x00000044,0x00000019,0x00040047,0x00000048,0x00000022,0x00000000,0x00040047,0x00000048,0x00000021,0x00000002,0x00030047,0x00000048,0x00000013,0x00030047,0x00000048,0x00000019,0x00040047,0x0000004c,0x00000022,0x00000000,0x00040047,0x0000004c,0x00000021,0x00000002,0x00030047,0x0000004c,0x00000013,0x00030047,0x0000004c,0x00000019,0x00040047,0x00000050,0x00000022,0x00000000,0x00040047,0x00000050,0x00000021,0x00000002,0x00030047,0x00000050,0x00000013,0x00030047,0x00000050,0x00000019,0x00040047,0x00000051,0x00000022,0x00000000,0x00040047,0x00000051,0x00000021,0x00000002,0x00030047,0x00000051,0x00000013,0x00030047,0x00000051,0x00000018,0x00040047,0x00000052,0x00000022,0x00000000,0x00040047,0x00000052,0x00000021,0x00000002,0x00030047,0x00000052,0x00000013,0x00030047,0x00000052,0x00000018,0x00040047,0x00000053,0x00000022,0x00000000,0x00040047,0x00000053,0x00000021,0x00000002,0x00030047,0x00000053,0x00000013,0x00030047,0x00000053,0x00000018,0x00040047,0x00000054,0x00000022,0x00000000,0x00040047,0x00000054,0x00000021,0x00000002,0x00030047,0x00000054,0x00000013,0x00030047,0x00000054,0x00000018,0x00040047,0x00000055,0x00000022,0x00000000,0x00040047,0x00000055,0x00000021,0x00000002,0x00030047,0x00000055,0x00000013,0x00030047,0x00000055,0x00000018,0x00040047,0x00000056,0x00000022,0x00000000,0x00040047,0x00000056,0x00000021,0x00000002,0x00030047,0x00000056,0x00000013,0x00030047,0x00000056,0x00000018,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00090019,0x0000000d,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000000e,0x0000000d,0x0003001d,0x0000000f,0x0000000e,0x00040020,0x00000010,0x00000000,0x0000000f,0x0004003b,0x00000010,0x00000011,0x00000000,0x00040017,0x00000012,0x00000006,0x00000002,0x00040015,0x00000013,0x00000020,0x00000001,0x0005001e,0x00000014,0x00000012,0x00000012,0x00000013,0x00040020,0x00000015,0x00000009,0x00000014,0x0004003b,0x00000015,0x00000016,0x00000009,0x0004002b,0x00000013,0x00000017,0x00000002,0x00040020,0x00000018,0x00000009,0x00000013,0x00040020,0x0000001b,0x00000000,0x0000000e,0x00040020,0x0000001e,0x00000001,0x00000012,0x0004003b,0x0000001e,0x0000001f,0x00000001,0x00040015,0x00000023,0x00000020,0x00000000,0x00090019,0x00000024,0x00000023,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000025,0x00000024,0x0004002b,0x00000023,0x00000026,0x00000001,0x0004001c,0x00000027,0x00000025,0x00000026,0x00040020,0x00000028,0x00000000,0x00000027,0x0004003b,0x00000028,0x00000029,0x00000000,0x00090019,0x0000002a,0x00000006,0x00000002,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000002b,0x0000002a,0x0004001c,0x0000002c,0x0000002b,0x00000026,0x00040020,0x0000002d,0x00000000,0x0000002c,0x0004003b,0x0000002d,0x0000002e,0x00000000,0x00090019,0x0000002f,0x00000023,0x00000002,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000030,0x0000002f,0x0004001c,0x00000031,0x00000030,0x00000026,0x00040020,0x00000032,0x00000000,0x00000031,0x0004003b,0x00000032,0x00000033,0x00000000,0x00090019,0x00000034,0x00000006,0x00000003,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x00000035,0x00000034,0x0004001c,0x00000036,0x00000035,0x00000026,0x00040020,0x00000037,0x00000000,0x00000036,0x0004003b,0x00000037,0x00000038,0x00000000,0x00090019,0x00000039,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000003a,0x00000039,0x00000026,0x00040020,0x0000003b,0x00000000,0x0000003a,0x0004003b,0x0000003b,0x0000003c,0x00000000,0x00090019,0x0000003d,0x00000013,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000003e,0x0000003d,0x00000026,0x00040020,0x0000003f,0x00000000,0x0000003e,0x0004003b,0x0000003f,0x00000040,0x00000000,0x00090019,0x00000041,0x00000023,0x00000001,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x00000042,0x00000041,0x00000026,0x00040020,0x00000043,0x00000000,0x00000042,0x0004003b,0x00000043,0x00000044,0x00000000,0x00090019,0x00000045,0x00000006,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x00000046,0x00000045,0x00000026,0x00040020,0x00000047,0x00000000,0x00000046,0x0004003b,0x00000047,0x00000048,0x00000000,0x00090019,0x00000049,0x00000013,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000004a,0x00000049,0x00000026,0x00040020,0x0000004b,0x00000000,0x0000004a,0x0004003b,0x0000004b,0x0000004c,0x00000000,0x00090019,0x0000004d,0x00000023,0x00000002,0x00000000,0x00000000,0x00000000,0x00000002,0x00000000,0x0004001c,0x0000004e,0x0000004d,0x00000026,0x00040020,0x0000004f,0x00000000,0x0000004e,0x0004003b,0x0000004f,0x00000050,0x00000000,0x0004003b,0x0000003b,0x00000051,0x00000000,0x0004003b,0x0000003f,0x00000052,0x00000000,0x0004003b,0x00000043,0x00000053,0x00000000,0x0004003b,0x00000047,0x00000054,0x00000000,0x0004003b,0x0000004b,0x00000055,0x00000000,0x0004003b,0x0000004f,0x00000056,0x00000000,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000007,0x0000000c,0x0000000b,0x00050041,0x00000018,0x00000019,0x00000016,0x00000017,0x0004003d,0x00000013,0x0000001a,0x00000019,0x00050041,0x0000001b,0x0000001c,0x00000011,0x0000001a,0x0004003d,0x0000000e,0x0000001d,0x0000001c,0x0004003d,0x00000012,0x00000020,0x0000001f,0x00050057,0x00000007,0x00000021,0x0000001d,0x00000020,0x00050085,0x00000007,0x00000022,0x0000000c,0x00000021,0x0003003e,0x00000009,0x00000022,0x000100fd,0x00010038
};

IMGUI_IMPL_API bool ImGui_ImplEvk_Init() {
    ImGuiIO& io = ImGui::GetIO();
    
    std::vector<uint8_t> VS(VERTEX.size()*4);
    std::memcpy(VS.data(), VERTEX.data(), VS.size());
    std::vector<uint8_t> FS(FRAGMENT.size()*4);
    std::memcpy(FS.data(), FRAGMENT.data(), FS.size());

    g_pipeline = CreatePipeline({
        .VS = VS,
        .FS = FS,
        .bindings = {{Format::RG32Sfloat, Format::RG32Sfloat, Format::RGBA8Unorm}},
        .attachments = {Format::BGRA8Unorm},
        .blends = {Blend::Alpha}
    });

    {
        unsigned char* pixels;
        int width, height;
        io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);
        size_t upload_size = width * height * 4 * sizeof(char);

        g_fontImage = CreateImage({
            .name = "ImGui Font Image",
            .extent = {(uint32_t)width, (uint32_t)height},
            .format = Format::RGBA8Unorm,
            .usage = ImageUsage::Sampled | ImageUsage::TransferDst,
        });

        Buffer font_staging = CreateBuffer({
            .name = "ImGui Font Staging",
            .size = upload_size,
            .usage = BufferUsage::TransferSrc,
            .memoryType = MemoryType::CPU
        });
        
        WriteBuffer(font_staging, pixels, upload_size);

        CmdBarrier(g_fontImage, ImageLayout::Undefined, ImageLayout::TransferDst);
        CmdCopy(font_staging, g_fontImage);
        CmdBarrier(g_fontImage, ImageLayout::TransferDst, ImageLayout::ShaderRead);
    }

    return true;
}
IMGUI_IMPL_API void ImGui_ImplEvk_Shutdown() {
    g_fontImage.release();
    g_vertexBuffer.release();
    g_indexBuffer.release();
    g_pipeline.release();
}
IMGUI_IMPL_API void ImGui_ImplEvk_RenderDrawData(ImDrawData* draw_data) {
    if (draw_data->TotalVtxCount == 0) return;

    CreateOrResizeBuffer(g_vertexBuffer, draw_data->TotalVtxCount * sizeof(ImDrawVert), BufferUsage::Vertex);
    CreateOrResizeBuffer(g_indexBuffer,  draw_data->TotalIdxCount * sizeof(ImDrawIdx),  BufferUsage::Index);
    
    CmdVertex(g_vertexBuffer);
    CmdIndex(g_indexBuffer, true);

    uint64_t vtx_dst = 0;
    uint64_t idx_dst = 0;
    for (int n = 0; n < draw_data->CmdListsCount; n++) {
        const ImDrawList* cmd_list = draw_data->CmdLists[n];
        WriteBuffer(g_vertexBuffer, cmd_list->VtxBuffer.Data, cmd_list->VtxBuffer.Size * sizeof(ImDrawVert), vtx_dst * sizeof(ImDrawVert));
        WriteBuffer(g_indexBuffer, cmd_list->IdxBuffer.Data, cmd_list->IdxBuffer.Size * sizeof(ImDrawIdx), idx_dst * sizeof(ImDrawIdx));
        vtx_dst += cmd_list->VtxBuffer.Size;
        idx_dst += cmd_list->IdxBuffer.Size;
    }

    ImVec2 clip_off = draw_data->DisplayPos;
    ImVec2 clip_scale = draw_data->FramebufferScale;
    int fb_width = (int)(draw_data->DisplaySize.x * draw_data->FramebufferScale.x);
    int fb_height = (int)(draw_data->DisplaySize.y * draw_data->FramebufferScale.y);

    CmdBind(g_pipeline);
    struct PC {
        float sx;
        float sy;
        float tx;
        float ty;
    } pc;
    pc.sx = 2.0f / draw_data->DisplaySize.x;
    pc.sy = 2.0f / draw_data->DisplaySize.y;
    pc.tx = -1.0f - draw_data->DisplayPos.x * pc.sx;
    pc.ty = -1.0f - draw_data->DisplayPos.y * pc.sy;
    CmdPush(&pc, sizeof(pc));

    int global_vtx_offset = 0;
    int global_idx_offset = 0;
    for (int n = 0; n < draw_data->CmdListsCount; n++) {
        const ImDrawList* cmd_list = draw_data->CmdLists[n];
        for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++) {
            const ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];

            if (pcmd->UserCallback != NULL) {
                if (pcmd->UserCallback == ImDrawCallback_ResetRenderState){ }
                else { pcmd->UserCallback(cmd_list, pcmd); }
            } else {
                ImVec4 clip_rect;
                clip_rect.x = (pcmd->ClipRect.x - clip_off.x) * clip_scale.x;
                clip_rect.y = (pcmd->ClipRect.y - clip_off.y) * clip_scale.y;
                clip_rect.z = (pcmd->ClipRect.z - clip_off.x) * clip_scale.x;
                clip_rect.w = (pcmd->ClipRect.w - clip_off.y) * clip_scale.y;

                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0f && clip_rect.w >= 0.0f) {
                    if (clip_rect.x < 0.0f) clip_rect.x = 0.0f;
                    if (clip_rect.y < 0.0f) clip_rect.y = 0.0f;
                    
                    float scale[2];
                    scale[0] = 2.0f / draw_data->DisplaySize.x;
                    scale[1] = 2.0f / draw_data->DisplaySize.y;
                    float translate[2];
                    translate[0] = -1.0f - draw_data->DisplayPos.x * scale[0];
                    translate[1] = -1.0f - draw_data->DisplayPos.y * scale[1];

                    int rid = (int)(uint64_t)pcmd->TextureId;
                    if(rid == 0) rid = GetRID(g_fontImage);
                    CmdPush(&rid, sizeof(int), sizeof(float)*4);
                    CmdScissor((int32_t)clip_rect.x, (int32_t)clip_rect.y, (uint32_t)(clip_rect.z - clip_rect.x), (uint32_t)(clip_rect.w - clip_rect.y));
                    CmdDrawIndexed(pcmd->ElemCount, 1, pcmd->IdxOffset + global_idx_offset, pcmd->VtxOffset + global_vtx_offset, 0);
                }
            }
        }
        global_idx_offset += cmd_list->IdxBuffer.Size;
        global_vtx_offset += cmd_list->VtxBuffer.Size;
    }
    
}